openapi: 3.0.3
info:
  title: Resume Generator API
  description: |
    REST API for generating professional PDF resumes from JSON Resume schema.

    **Features:**
    - Accepts JSON Resume schema v1.0.0 input
    - Generates print-ready PDF output with smart content adaptation
    - Supports English and Spanish localization
    - Rate limiting: 10 requests/minute per authenticated user
    - Header-based API versioning via `API-Version` header (not path-based)

    **Authentication:**
    - All endpoints require JWT bearer token (Keycloak-issued)
    - Include token in `Authorization: Bearer <token>` header

    **Related Documents:**
    - Feature Spec: `specs/003-resume-generator-mvp/spec.md`
    - Data Model: `specs/003-resume-generator-mvp/data-model.md`
  version: 1.0.0
  contact:
    name: Loomify Support
    email: support@loomify.com

security:
  - bearerAuth: []

servers:
  - url: https://api.loomify.com/api
    description: Production
  - url: https://staging-api.loomify.com/api
    description: Staging
  - url: http://localhost:8080/api
    description: Local Development

tags:
  - name: Resumes
    description: Resume generation operations

paths:
  /resumes:
    post:
      tags:
        - Resumes
      summary: Generate PDF resume
      description: |
        Generates a professional PDF resume from JSON Resume schema data.

        **Process:**
        1. Validates input against JSON Resume schema
        2. Calculates content metrics for adaptive layout
        3. Renders LaTeX template with localized content
        4. Compiles PDF using pdflatex in isolated Docker container
        5. Returns PDF binary with appropriate headers

        **Performance:**
        - Expected generation time: 5-8 seconds
        - Timeout: 10 seconds

        **Rate Limiting:**
        - Authenticated users: 10 requests/minute
        - Returns HTTP 429 if limit exceeded
      operationId: generateResume
      security:
        - bearerAuth: []
      parameters:
        - name: API-Version
          in: header
          description: API version (header-based versioning)
          required: true
          schema:
            type: string
            enum: [v1]
            default: v1
          example: v1
        - name: Accept-Language
          in: header
          description: Preferred language for the resume (en or es)
          required: false
          schema:
            type: string
            enum: [en, es, en-US, es-ES]
            default: en
          example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeData'
            examples:
              software-engineer:
                summary: Software Engineer Resume (Skills-Heavy)
                value:
                  basics:
                    name: Jane Doe
                    label: Senior Software Engineer
                    email: jane.doe@example.com
                    phone: +1-555-0123
                    url: https://janedoe.dev
                    summary: Experienced software engineer specializing in cloud-native applications and microservices architecture.
                    location:
                      city: San Francisco
                      countryCode: US
                    profiles:
                      - network: LinkedIn
                        url: https://linkedin.com/in/janedoe
                      - network: GitHub
                        url: https://github.com/janedoe
                  work:
                    - name: Tech Corp
                      position: Senior Software Engineer
                      startDate: 2020-01-15
                      endDate: null
                      summary: Leading backend development for cloud infrastructure.
                      highlights:
                        - Designed and implemented microservices architecture serving 1M+ users
                        - Reduced API response time by 40% through optimization
                    - name: Startup Inc
                      position: Software Engineer
                      startDate: 2018-06-01
                      endDate: 2019-12-31
                      summary: Full-stack development for SaaS platform.
                      highlights:
                        - Built RESTful APIs using Spring Boot and Kotlin
                  education:
                    - institution: University of Technology
                      area: Computer Science
                      studyType: Bachelor of Science
                      startDate: 2014-09-01
                      endDate: 2018-05-31
                  skills:
                    - name: Programming Languages
                      keywords: [Kotlin, Java, Python, TypeScript, Go]
                    - name: Frameworks
                      keywords: [Spring Boot, Vue.js, React, Node.js]
                    - name: Cloud & DevOps
                      keywords: [AWS, Docker, Kubernetes, Terraform, GitHub Actions]
                    - name: Databases
                      keywords: [PostgreSQL, Redis, MongoDB]
                  languages:
                    - language: English
                      fluency: Native
                    - language: Spanish
                      fluency: Professional Working Proficiency
                  projects:
                    - name: Open Source Contributor
                      description: Active contributor to Spring Boot and Kotlin ecosystem projects.
                      url: https://github.com/janedoe
      responses:
        '200':
          description: Resume generated successfully
          headers:
            Content-Disposition:
              description: Suggests filename for downloaded PDF
              schema:
                type: string
                example: attachment; filename="resume.pdf"
            Content-Length:
              description: Size of PDF in bytes
              schema:
                type: integer
                example: 245678
            X-Generation-Time-Ms:
              description: Time taken to generate PDF (milliseconds)
              schema:
                type: integer
                example: 6543
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing-required-field:
                  summary: Missing required field
                  value:
                    error:
                      code: invalid_request
                      message: The request was invalid.
                      errors:
                        - field: basics.name
                          message: Name is required
                field-too-long:
                  summary: Field exceeds maximum length
                  value:
                    error:
                      code: invalid_request
                      message: The request was invalid.
                      errors:
                        - field: basics.name
                          message: Name cannot exceed 100 characters
        '401':
          description: Unauthorized - missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: unauthorized
                  message: Authentication is required to access this resource.
        '413':
          description: Payload too large (>100KB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: payload_too_large
                  message: Request payload exceeds maximum size of 100KB.
        '422':
          description: Unprocessable Entity - LaTeX compilation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: latex_compilation_failed
                  message: Failed to compile resume. Please check your input data for special characters.
        '429':
          description: Rate limit exceeded
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
                example: 60
            X-RateLimit-Limit:
              description: Total allowed requests per minute
              schema:
                type: integer
                example: 10
            X-RateLimit-Remaining:
              description: Remaining requests in current window
              schema:
                type: integer
                example: 0
            X-RateLimit-Reset:
              description: Unix timestamp when rate limit resets
              schema:
                type: integer
                example: 1704067200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                rate-limit-en:
                  summary: Rate limit (English)
                  value:
                    error:
                      code: rate_limit_exceeded
                      message: You have exceeded the rate limit of 10 requests per minute. Please try again later.
                      retryAfter: 60
                rate-limit-es:
                  summary: Rate limit (Spanish)
                  value:
                    error:
                      code: rate_limit_exceeded
                      message: Has excedido el l√≠mite de 10 solicitudes por minuto. Por favor, int√©ntalo de nuevo m√°s tarde.
                      retryAfter: 60
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: internal_error
                  message: An unexpected error occurred. Please try again later.
        '504':
          description: Gateway timeout - PDF generation exceeded 10 seconds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: generation_timeout
                  message: Resume generation timed out. Please try again with a shorter resume.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Keycloak-issued JWT token. Include in Authorization header:
        `Authorization: Bearer <token>`

  schemas:
    ResumeData:
      type: object
      description: Resume data following JSON Resume schema v1.0.0
      required:
        - basics
      properties:
        basics:
          $ref: '#/components/schemas/PersonalInfo'
        work:
          type: array
          description: Work experience entries
          items:
            $ref: '#/components/schemas/WorkExperience'
          maxItems: 20
        education:
          type: array
          description: Education history
          items:
            $ref: '#/components/schemas/Education'
          maxItems: 10
        skills:
          type: array
          description: Skill categories
          items:
            $ref: '#/components/schemas/SkillCategory'
          maxItems: 10
        languages:
          type: array
          description: Language proficiencies
          items:
            $ref: '#/components/schemas/Language'
          maxItems: 10
        projects:
          type: array
          description: Personal or professional projects
          items:
            $ref: '#/components/schemas/Project'
          maxItems: 10

    PersonalInfo:
      type: object
      description: Basic personal information (JSON Resume 'basics' section)
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Full name
          minLength: 1
          maxLength: 100
          example: Jane Doe
        label:
          type: string
          description: Job title or professional label
          maxLength: 100
          example: Senior Software Engineer
        email:
          type: string
          format: email
          description: Email address
          example: jane.doe@example.com
        phone:
          type: string
          description: Phone number
          example: +1-555-0123
        url:
          type: string
          format: uri
          description: Personal website or portfolio URL
          example: https://janedoe.dev
        summary:
          type: string
          description: Professional summary or objective
          maxLength: 500
          example: Experienced software engineer specializing in cloud-native applications and microservices architecture.
        location:
          $ref: '#/components/schemas/Location'
        profiles:
          type: array
          description: Social media profiles
          items:
            $ref: '#/components/schemas/SocialProfile'
          maxItems: 5

    Location:
      type: object
      description: Geographic location
      properties:
        city:
          type: string
          example: San Francisco
        countryCode:
          type: string
          description: ISO 3166-1 alpha-2 country code
          pattern: '^[A-Z]{2}$'
          example: US

    SocialProfile:
      type: object
      description: Social media or professional network profile
      required:
        - network
        - url
      properties:
        network:
          type: string
          description: Social network name
          example: LinkedIn
        url:
          type: string
          format: uri
          description: Profile URL
          example: https://linkedin.com/in/janedoe

    WorkExperience:
      type: object
      description: Work history entry
      required:
        - name
        - position
        - startDate
      properties:
        name:
          type: string
          description: Company or organization name
          minLength: 1
          maxLength: 100
          example: Tech Corp
        position:
          type: string
          description: Job title
          minLength: 1
          maxLength: 100
          example: Senior Software Engineer
        startDate:
          type: string
          format: date
          description: Employment start date (YYYY-MM-DD)
          example: '2020-01-15'
        endDate:
          type: string
          format: date
          description: Employment end date (YYYY-MM-DD). Null or omitted means "Present"
          nullable: true
          example: null
        summary:
          type: string
          description: Brief description of role and responsibilities
          maxLength: 500
          example: Leading backend development for cloud infrastructure.
        highlights:
          type: array
          description: Key achievements or responsibilities
          items:
            type: string
            maxLength: 500
          maxItems: 10

    Education:
      type: object
      description: Education history entry
      required:
        - institution
        - area
        - studyType
        - startDate
      properties:
        institution:
          type: string
          description: School or university name
          minLength: 1
          maxLength: 100
          example: University of Technology
        area:
          type: string
          description: Field of study
          minLength: 1
          maxLength: 100
          example: Computer Science
        studyType:
          type: string
          description: Degree type
          minLength: 1
          maxLength: 100
          example: Bachelor of Science
        startDate:
          type: string
          format: date
          description: Program start date (YYYY-MM-DD)
          example: '2014-09-01'
        endDate:
          type: string
          format: date
          description: Graduation date (YYYY-MM-DD). Null or omitted means "In Progress"
          nullable: true
          example: '2018-05-31'

    SkillCategory:
      type: object
      description: Skill category with associated keywords
      required:
        - name
        - keywords
      properties:
        name:
          type: string
          description: Category name (e.g., "Programming Languages", "Frameworks")
          minLength: 1
          maxLength: 100
          example: Programming Languages
        keywords:
          type: array
          description: Individual skills within this category
          minItems: 1
          maxItems: 20
          items:
            type: string
            minLength: 1
            maxLength: 50
          example: [Kotlin, Java, Python, TypeScript, Go]

    Language:
      type: object
      description: Language proficiency
      required:
        - language
        - fluency
      properties:
        language:
          type: string
          description: Language name
          example: English
        fluency:
          type: string
          description: Proficiency level
          example: Native

    Project:
      type: object
      description: Personal or professional project
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Project name
          minLength: 1
          maxLength: 100
          example: Open Source Contributor
        description:
          type: string
          description: Project description
          minLength: 1
          maxLength: 500
          example: Active contributor to Spring Boot and Kotlin ecosystem projects.
        url:
          type: string
          format: uri
          description: Project URL or repository
          example: https://github.com/janedoe

    ErrorResponse:
      type: object
      description: Standard error response format
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Machine-readable error code
              enum:
                - invalid_request
                - unauthorized
                - forbidden
                - not_found
                - payload_too_large
                - rate_limit_exceeded
                - latex_compilation_failed
                - generation_timeout
                - internal_error
              example: invalid_request
            message:
              type: string
              description: Human-readable error message (localized)
              example: The request was invalid.
            errors:
              type: array
              description: Detailed field-level validation errors (for 400 responses)
              items:
                type: object
                required:
                  - field
                  - message
                properties:
                  field:
                    type: string
                    description: JSON path to invalid field
                    example: basics.name
                  message:
                    type: string
                    description: Validation error message
                    example: Name is required
            retryAfter:
              type: integer
              description: Seconds to wait before retrying (for 429 responses)
              example: 60
